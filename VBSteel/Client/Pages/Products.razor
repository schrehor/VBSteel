@page "/tovar"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using VBSteel.Shared
@using VBSteel.Client.Pages.Components

<div class="container text-center stretch-content-fullscreen">
    <div class="row">
        <div class="col-12">
            <h1 class="mt-3">Celý sortiment tovaru</h1>
            <input class="my-4" type="text" @oninput="FilterProducts" placeholder="Filtrovať podľa mena" />
        </div>
    </div>

    @{
        if (_groupedProductViews == null)
        {
            <LoadingAnimation/>
        }
        else
        {
            foreach (var group in _groupedProductViews)
            {
                <div class="row py-4">
                    @foreach (var product in group)
                    {
                        <ProductSmallView Product="@product"/>
                    }
                </div>
            }
        }
    }
</div>

@code
{
    private List<ProductViewModel>? _productViews;
    private List<List<ProductViewModel>>? _groupedProductViews;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts(string filter = "")
    {
        var response = await HttpClient.GetAsync("api/Product/productView");
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Error: {response.StatusCode}");
            return;
        }

        _productViews = await response.Content.ReadFromJsonAsync<List<ProductViewModel>>();
        if (_productViews == null)
        {
            NavigationManager.NavigateTo("/404");
            return;
        }

        if (!string.IsNullOrEmpty(filter))
        {
            _productViews = _productViews.Where(p => p.Name.Contains(filter, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        _groupedProductViews = GroupProductViews(_productViews, 3);
    }

    private List<List<ProductViewModel>> GroupProductViews(List<ProductViewModel> views, int groupSize)
    {
        var groups = new List<List<ProductViewModel>>();
        for (int i = 0; i < views.Count; i += groupSize)
        {
            groups.Add(views.GetRange(i, Math.Min(groupSize, views.Count - i)));
        }
        return groups;
    }

    private async Task FilterProducts(ChangeEventArgs e)
    {
        await LoadProducts(e.Value.ToString());
    }
}
