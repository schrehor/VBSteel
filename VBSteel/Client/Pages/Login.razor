@page "/prihlasenie"
@using VBSteel.Shared
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationProvider AuthenticationProvider;

<div class="stretch-content-fullscreen">
	@if (_errorMessage is not null)
	{
		<div class="alert alert-danger" role="alert">
			@_errorMessage
		</div>
	}
	<div class="login-form-container">
		<h3>Prihlásenie</h3>
		<EditForm class="login-form" Model="@loginModel" OnValidSubmit="@ProcessLogin">
			<DataAnnotationsValidator/>
			<div class="form-group">
				<label for="email">Email</label>
				<input type="email" class="form-control" id="email" @bind="loginModel.Email"/>
				<ValidationMessage For="@(() => loginModel.Email)" class="validation-message"/>
			</div>
			<div class="form-group">
				<label for="password">Heslo</label>
				<input type="password" class="form-control" id="password" @bind="loginModel.Password"/>
				<ValidationMessage For="@(() => loginModel.Password)" class="validation-message"/>
			</div>
			<button type="submit" class="btn btn-outline-secondary my-2">Prihlásiť</button>
		</EditForm>
	</div>
</div>


@code {
    private LoginViewModel loginModel = new();
    public string ReturnUrl { get; set; }
    private string? _errorMessage;

    private async Task ProcessLogin(EditContext editContext)
    {
        var response = await HttpClient.PostAsJsonAsync("api/login/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await AuthenticationProvider.MarkUserAsAuthenticated(token);

            NavigationManager.NavigateTo("/");
        }
        else
        {
            // Handle errors, for example, show an error message
            _errorMessage = "Zlé meno/heslo, skúste znova.";
        }
    }

}