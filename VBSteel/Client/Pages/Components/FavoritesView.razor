@inject AuthenticationProvider AuthenticationProvider
@inject AuthorizedHttpClient AuthorizedHttpClient
@using VBSteel.Shared

@if (_isUserLoggedIn)
{
    @if (_userRole == UserRole.Admin)
    {
        <h3>Favorite Statistics</h3>
        @foreach (var favoriteCount in _favoriteCounts)
        {
	        <div style="margin-bottom: 1em; padding: 1em; border: 1px solid #ddd;">
		        <p>Product Name: @favoriteCount.ProductName</p>
		        <p>Favorites: @favoriteCount.Count</p>
	        </div>
        }
    }
    else
    {
        <h3>My Favorites</h3>
        @foreach (var product in _favoriteProducts)
        {
            <div>
                <p>@product.Name</p>
                <button @onclick="() => RemoveFavorite(product.ProductId)">Remove from favorites</button>
            </div>
        }
    }
}
else
{
    <p>Please log in to view this page.</p>
}

@code {
    private bool _isUserLoggedIn;
    private UserRole _userRole;
    private List<Product> _favoriteProducts = new();
    private List<ProductFavoriteCount> _favoriteCounts = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null)
            _isUserLoggedIn = user.Identity.IsAuthenticated;

        if (_isUserLoggedIn)
        {
            _userRole = AuthenticationProvider.DetermineUserRole();

            if (_userRole == UserRole.Admin)
            {
	            var response = await AuthorizedHttpClient.GetAsync("api/Favorites/GetFavoriteCounts");
	            if (response.IsSuccessStatusCode)
	            {
		            _favoriteCounts = await response.Content.ReadFromJsonAsync<List<ProductFavoriteCount>>();
	            }
            }
            else
            {
                var response = await AuthorizedHttpClient.PostAsJsonAsync("api/Favorites/GetUserFavorites", AuthenticationProvider.GetUserId());
                if (response.IsSuccessStatusCode)
                {
                    _favoriteProducts = await response.Content.ReadFromJsonAsync<List<Product>>();
                }
            }
        }
    }

    private async Task RemoveFavorite(Guid productId)
    {
        var response = await AuthorizedHttpClient.DeleteAsync($"api/Favorites/Delete?userId={AuthenticationProvider.GetUserId()}&productId={productId}");
        if (response.IsSuccessStatusCode)
        {
            _favoriteProducts.RemoveAll(p => p.ProductId == productId);
        }
    }
}
