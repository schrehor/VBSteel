@inject AuthenticationProvider AuthenticationProvider
@inject AuthorizedHttpClient AuthorizedHttpClient
@using VBSteel.Shared

@if (_isUserLoggedIn)
{
	@if (_userRole == UserRole.Admin)
	{
		<h3>Štatistika obľúbenosti</h3>
		if (_favoriteCounts is null)
		{
			<p>Zatiaľ žiadna štatistika</p>
		}
		else
		{
			@foreach (var favoriteCount in _favoriteCounts)
			{
				<div class="card mb-3">
					<div class="card-body">
						<h5 class="card-title">@favoriteCount.ProductName</h5>
						<p class="card-text">Počet: @favoriteCount.Count</p>
					</div>
				</div>
			}
		}
	}
	else
	{
		<h3>Moje obľúbené produtky</h3>
		if (_favoriteProducts is null)
		{
			<p>Žiadne obľúbené produkty</p>
		}
		else
		{
			@foreach (var product in _favoriteProducts)
			{
				<div class="card mb-3">
					<div class="card-body">
						<h5 class="card-title">@product.Name</h5>
						<button class="btn btn-outline-danger m-2" @onclick="() => RemoveFavorite(product.ProductId)">
							<i class="bi bi-heart-fill"></i>
						</button>
					</div>
				</div>
			}
		}
	}
}
else
{
    <p>Please log in to view this page.</p>
}

@code {
    private bool _isUserLoggedIn;
    private UserRole _userRole;
    private List<Product>? _favoriteProducts;
    private List<ProductFavoriteCount>? _favoriteCounts;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null)
            _isUserLoggedIn = user.Identity.IsAuthenticated;

        if (_isUserLoggedIn)
        {
            _userRole = AuthenticationProvider.DetermineUserRole();

            if (_userRole == UserRole.Admin)
            {
	            var response = await AuthorizedHttpClient.GetAsync("api/Favorites/GetFavoriteCounts");
	            if (response.IsSuccessStatusCode)
	            {
		            _favoriteCounts = await response.Content.ReadFromJsonAsync<List<ProductFavoriteCount>>();
	            }
            }
            else
            {
                var response = await AuthorizedHttpClient.PostAsJsonAsync("api/Favorites/GetUserFavorites", AuthenticationProvider.GetUserId());
                if (response.IsSuccessStatusCode)
                {
                    _favoriteProducts = await response.Content.ReadFromJsonAsync<List<Product>>();
                }
            }
        }
    }

    private async Task RemoveFavorite(Guid productId)
    {
        var response = await AuthorizedHttpClient.DeleteAsync($"api/Favorites/Delete?userId={AuthenticationProvider.GetUserId()}&productId={productId}");
        if (response.IsSuccessStatusCode)
        {
            _favoriteProducts.RemoveAll(p => p.ProductId == productId);
        }
    }
}
