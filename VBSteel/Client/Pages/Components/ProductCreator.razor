@using VBSteel.Shared
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers
@using System.Linq.Expressions
@inject AuthorizedHttpClient AuthorizedHttpClient

@if (_success)
{
	<div class="alert alert-success" role="alert">
		Produkt bol vytvorený.
	</div>
}
@if (_error)
{
	<div class="alert alert-danger" role="alert">
		Produkt sa nepodarilo vytvoriť.
	</div>
}
<div class="login-form-container">
    <EditForm class="login-form" Model="@_newProduct" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Názov produktu</label>
            <InputText id="name" class="form-control" @bind-Value="_newProduct.Name" />
        </div>
        <div class="form-group">
            <label for="description">Popis produktu</label>
            <InputTextArea id="description" class="form-control" @bind-Value="_newProduct.Description"/>
        </div>
        <div class="form-group">
            <label for="image">Obrázok produktu</label>
            <InputFile id="image" class="form-control-file" OnChange="@HandleFileSelected" />
        </div>

        <button type="submit" class="btn btn-outline-secondary my-2">Vytvor produkt</button>
    </EditForm>
</div>

@code {
    private ProductInputModel _newProduct = new();
    private bool _success;
    private bool _error;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await AuthorizedHttpClient.PostAsJsonAsync("api/Product/CreateProduct", _newProduct);
            if (response.IsSuccessStatusCode)
            {
                _success = true;
                StateHasChanged();
                await Task.Delay(2000);
                _success = false;
            }
            else
            {
	            _error = true;
                StateHasChanged();
                await Task.Delay(2000);
                _error = false;
            }
        }
        catch (Exception ex)
        {
	        _error = true;
            StateHasChanged();
            await Task.Delay(2000);
            _error = false;
        }
    }

    private async void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var selectedFile = e.File;
        var memoryStream = new MemoryStream();
        await selectedFile.OpenReadStream().CopyToAsync(memoryStream);
        _newProduct.ImageData = memoryStream.ToArray();
        _newProduct.ImageType = selectedFile.ContentType.Split('/')[1];
    }
}
