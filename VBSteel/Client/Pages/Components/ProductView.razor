@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient HttpClient
@inject AuthenticationProvider AuthenticationProvider
@inject AuthorizedHttpClient AuthorizedHttpClient
@using VBSteel.Shared

<h3>ProductEditor</h3>

@foreach (var product in _products)
{
	<div class="card mb-3">
		<div class="card-body">
			@if (product.ProductId != _editingProductId)
			{
				<h5 class="card-title">@product.Name</h5>
				<p class="card-text">@product.Description</p>
				<button class="btn btn-primary" @onclick="() => StartEditing(product)">Edit</button>
				<button class="btn btn-danger" @onclick="() => DeleteProduct(product.ProductId)">Delete</button>
			}
			else
			{
				<EditForm Model="_editedProduct" OnValidSubmit="UpdateProduct">
					<DataAnnotationsValidator />
					<div class="form-group">
						<label for="name">Názov:</label>
                        <InputText id="name" class="form-control" @bind-Value="_editedProduct.Name" />
                        <ValidationMessage For="@(() => _editedProduct.Name)" class="validation-message" />
					</div>
					<div class="form-group">
						<label for="description">Popis:</label>
                        <InputTextArea id="description" class="form-control" @bind-Value="_editedProduct.Description" />
                        <ValidationMessage For="@(() => _editedProduct.Description)" class="validation-message" />
					</div>
					<div class="form-group">
						<label for="imagePath">Cesta k obrázku:</label>
                        <InputText id="imagePath" class="form-control mb-3" @bind-Value="_editedProduct.ImagePath" readonly />
                        <ValidationMessage For="@(() => _editedProduct.ImagePath)" class="validation-message" />
					</div>
					<button type="submit" class="btn btn-success" >Save</button>
					<button type="button" class="btn btn-secondary" @onclick="CancelEditing">Cancel</button>
				</EditForm>
			}
		</div>
	</div>
}

@code {
    private List<Product> _products = new();
    private Guid _editingProductId;
    private Product _editedProduct = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetFromJsonAsync<List<Product>>("api/Product/products");
        if (response != null)
        {
            _products = response;
        }
    }

    private void StartEditing(Product product)
    {
        _editingProductId = product.ProductId;
        _editedProduct = new Product
            {
                ProductId = product.ProductId,
                Name = product.Name,
                Description = product.Description,
				ImagePath = product.ImagePath,
            };
    }

    private void CancelEditing()
	{
		_editingProductId = Guid.Empty;
	}

    private async Task UpdateProduct()
    {
        var response = await AuthorizedHttpClient.PostAsJsonAsync("api/Product/UpdateProduct", _editedProduct);
        if (response.IsSuccessStatusCode)
        {
            // Refresh the list of products
            var productsResponse = await HttpClient.GetFromJsonAsync<List<Product>>("api/Product/products");
            if (productsResponse != null)
            {
                _products = productsResponse;
            }
            _editingProductId = Guid.Empty;
        }
    }

    private async Task DeleteProduct(Guid productId)
    {
        var response = await AuthorizedHttpClient.PostAsJsonAsync("api/Product/DeleteProduct", productId);
        if (response.IsSuccessStatusCode)
        {
            // Refresh the list of products
            var productsResponse = await HttpClient.GetFromJsonAsync<List<Product>>("api/Product/productView");
            if (productsResponse != null)
            {
                _products = productsResponse;
            }
        }
    }
}
