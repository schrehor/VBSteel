@inject AuthorizedHttpClient AuthorizedHttpClient
@using VBSteel.Shared
@using Microsoft.AspNetCore.Components.Forms

<div class="stretch-content-fullscreen">
    <h3>Správy</h3>
    @if (_internalError)
    {
        <div class="alert alert-danger" role="alert">
            Nastala neočakávaná chyba.
        </div>
    }
    else if (_messages == null)
    {
	    <LoadingAnimation/>
    }
    else if (_messages.Count == 0)
    {
        <div class="alert alert-warning" role="alert">
            Používateľ nemá žiadne správy.
        </div>
    }
    else
    {
        @foreach (var message in _messages)
        {
            <div class="card mb-3">
                <div class="card-body">
                    @if (_editingMessage == message)
                    {
                        <EditForm Model="_editingMessage" OnValidSubmit="SaveChanges">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label for="email">Email</label>
                                <InputText id="email" class="form-control" @bind-Value="_editingMessage.Email" />
                                <ValidationMessage For="@(() => _editingMessage.Email)" class="validation-message" />
                            </div>
                            <div class="form-group">
	                            <label for="message">Správa</label>
                                <InputTextArea id="message" class="form-control mb-3" @bind-Value="_editingMessage.Message" />
                                <ValidationMessage For="@(() => _editingMessage.Message)" class="validation-message" />
                            </div>
                            <button type="submit" class="btn btn-success">Ulož</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelEditing">Zruš zmeny</button>
                        </EditForm>
                    }
                    else
                    {
                        <h5 class="card-title">@message.Email</h5>
                        <p class="card-text">@message.Message</p>
                        <button class="btn btn-primary" @onclick="() => StartEditingMessage(message)">Uprav</button>
                        <button class="btn btn-danger" @onclick="() => DeleteMessage(message)">Vymaž</button>
                    }
                    <p class="card-text">
                        <small class="text-muted">
                            @if (message.User != null)
                            {
                                @(@message.User.Name + " " + @message.User.Surname)
                            }
                        </small>
                    </p>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter] public UserRole UserRole { get; set; }
    private Form? _editingMessage;
    private List<Form>? _messages;
    private bool _internalError;

    protected override async Task OnInitializedAsync()
    {
        await LoadMessages(UserRole);
    }

    private async Task LoadMessages(UserRole role)
    {
        try
        {
            if (UserRole == UserRole.Admin)
            {
                await LoadMessagesForAdmin();
            }
            else
            {
                await LoadMessagesForUser();
            }
        }
        catch
        {
            _internalError = true;
        }
    }

    private async Task LoadMessagesForAdmin()
    {
        var responseMessages = await AuthorizedHttpClient.GetAsync("api/form/getAllMessages");
        if (responseMessages.IsSuccessStatusCode)
        {
            _messages = await responseMessages.Content.ReadFromJsonAsync<List<Form>>();
        }
    }

    private async Task LoadMessagesForUser()
    {
        var responseMessages = await AuthorizedHttpClient.GetAsync("api/form/getUserMessages");
        if (responseMessages.IsSuccessStatusCode)
        {
            _messages = await responseMessages.Content.ReadFromJsonAsync<List<Form>>();
        }
    }

    private void StartEditingMessage(Form message)
    {
        _editingMessage = message;
    }

    private async Task SaveChanges()
    {
        var response = await AuthorizedHttpClient.PutAsJsonAsync($"api/form/updateForm/{_editingMessage.FormId}", _editingMessage);
        if (response.IsSuccessStatusCode)
        {
            // Refresh the messages list
            await LoadMessages(UserRole);
            CancelEditing();
        }
    }

    private void CancelEditing()
    {
        _editingMessage = null;
    }

    private async Task DeleteMessage(Form message)
    {
        var response = await AuthorizedHttpClient.DeleteAsync($"api/form/{message.FormId}");
        if (response.IsSuccessStatusCode)
        {
            // Refresh the messages list
            await LoadMessages(UserRole);
        }
        else
        {
            _internalError = true;
        }
    }
}
